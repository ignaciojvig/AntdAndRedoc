{"version":3,"sources":["components/Layout/OpenAPIEditorModal/OpenAPIEditor.tsx","components/Layout/OpenAPIList/OpenAPIList.tsx","components/Layout/Layout.tsx","components/ApiDoc/ApiDoc.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["APIEditorModal","onFinish","useState","swaggerUrl","primaryColor","setPrimaryColor","textColor","setTextColor","useEffect","console","log","values","initialValues","swaggerURL","Item","name","label","size","maxLength","placeholder","content","color","onChangeComplete","hex","presetColors","placement","trigger","value","style","borderColor","onClick","OpenAPIList","dataSource","itemLayout","renderItem","item","actions","href","rel","target","Layout","openAPIList","setOpenAPIList","finishAddingAnAPI","formPayload","openAPIListCopy","map","x","replace","justify","align","height","span","display","justifyContent","flexDirection","alignItems","type","Modal","info","title","centered","maskClosable","okText","ApiDoc","specification","setSpecification","parsedUrl","queryString","parse","window","location","search","axios","get","then","data","catch","err","spec","options","nativeScrollbars","theme","colors","primary","main","text","App","from","to","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0cAkBaA,EAAgD,SAAC,GAElC,IAD1BC,EACyB,EADzBA,SACyB,EACJC,mBAAS,+CAAvBC,EADkB,sBAEeD,mBAAS,WAFxB,mBAElBE,EAFkB,KAEJC,EAFI,OAGSH,mBAAS,WAHlB,mBAGlBI,EAHkB,KAGPC,EAHO,KAUzB,OALAC,qBAAU,WACRC,QAAQC,IAAI,YAAaN,GACzBK,QAAQC,IAAI,SAAUJ,KACrB,CAACF,EAAcE,IAGhB,kBAAC,IAAD,CACEL,SAAU,SAACU,GAAD,OAAYV,EAASU,IAC/BC,cAAe,CAAEC,WAAYV,IAE7B,kBAAC,IAAKW,KAAN,CAAWC,KAAK,aAAaC,MAAM,iCACjC,kBAAC,IAAD,CACEC,KAAK,SACLC,UAAW,GACXC,YAAY,mCAGhB,kBAAC,IAAKL,KAAN,CAAWC,KAAK,eAAeC,MAAM,iBACnC,kBAAC,IAAD,CACEI,QACE,kBAAC,eAAD,CACEC,MAAOjB,EACPkB,iBAAkB,SAACD,GAAD,OAAWhB,EAAgBgB,EAAME,MACnDC,aAAc,CACZ,UACA,UACA,UACA,UACA,aAINC,UAAU,QACVC,QAAQ,SAER,kBAAC,IAAD,CACET,KAAK,SACLC,UAAW,EACXC,YAAaf,EACbuB,MAAOvB,EACPwB,MAAO,CACLC,YAAazB,EACbiB,MAAOjB,OAKf,kBAAC,IAAKU,KAAN,CAAWC,KAAK,YAAYC,MAAM,cAChC,kBAAC,IAAD,CACEI,QACE,kBAAC,eAAD,CACEC,MAAOf,EACPgB,iBAAkB,SAACD,GAAD,OAAWd,EAAac,EAAME,QAGpDE,UAAU,QACVC,QAAQ,SAER,kBAAC,IAAD,CACET,KAAK,SACLC,UAAW,EACXC,YAAab,EACbqB,MAAOrB,EACPsB,MAAO,CACLC,YAAavB,EACbe,MAAOf,OAKf,kBAAC,IAAD,CACEwB,QAAS,kBACP7B,EAAS,CACPY,WAAYV,EACZC,aAAcA,EACdE,UAAWA,MALjB,S,SCvFOyB,EAAsC,SAAC,GAE/B,IADnBC,EACkB,EADlBA,WAEA,OACE,kBAAC,IAAD,CACEC,WAAW,aACXD,WAAYA,EACZE,WAAY,SAACC,GAAD,OAKV,kBAAC,IAAKrB,KAAN,CAAWsB,QAAS,CAAC,uBAAGC,KAAK,KAAR,UAAwB,uBAAGA,KAAK,KAAR,SAC3C,uBACEA,KAAI,4BAAuBF,EAAKtB,WAA5B,yBAAuDsB,EAAK/B,aAA5D,sBAAsF+B,EAAK7B,WAC/FgC,IAAI,sBACJC,OAAO,UAENJ,EAAKtB,iBCpBL2B,EAAS,WAAO,IAAD,EACYtC,mBAAgB,IAD5B,mBACnBuC,EADmB,KACNC,EADM,KAGpBC,EAAoB,SAACC,GACzBnC,QAAQC,IAAIkC,GAEZ,IAAMC,EAAkB,sBAAIJ,GAAJ,CAAiBG,IAAaE,KAAI,SAACC,GAAD,mBAAC,eACtDA,GADqD,IAExD3C,aAAc2C,EAAE3C,aAAa4C,QAAQ,IAAK,IAC1C1C,UAAWyC,EAAEzC,UAAU0C,QAAQ,IAAK,SAGtCN,EAAeG,IAGjB,OACE,kBAAC,IAAD,CAAKI,QAAQ,SAASC,MAAM,SAAStB,MAAO,CAAEuB,OAAQ,UACpD,kBAAC,IAAD,CACEC,KAAM,GACNxB,MAAO,CACLyB,QAAS,OACTC,eAAgB,SAChBC,cAAe,SACfC,WAAY,WANhB,iCAUE,kBAAC,EAAD,CAAaxB,WAAYS,KAE3B,kBAAC,IAAD,CAAKW,KAAM,IACT,kBAAC,IAAD,CACEK,KAAK,UACL3B,QAAS,kBF9BgB7B,EE8BS0C,OF7B1Ce,IAAMC,KAAK,CACTC,MAAO,uBACPC,UAAU,EACVC,cAAc,EACd1C,QAAS,kBAAC,EAAD,CAAgBnB,SAAUA,IACnC8D,OAAQ,UANsB,IAAC9D,IE4B3B,gC,8DC/BK+D,EAAS,WAAO,IAAD,EACgB9D,qBADhB,mBACnB+D,EADmB,KACJC,EADI,KAGpBC,EAAYC,IAAYC,MAAMC,OAAOC,SAASC,QAC9C3D,EAAasD,EAAUtD,WACvBT,EAAY,WAAO+D,EAAU/D,cAC7BE,EAAS,WAAO6D,EAAU7D,WAEhCE,qBAAU,WACRiE,IACGC,IAAI7D,GACJ8D,MAAK,SAAC5B,GACLmB,EAAiBnB,EAAE6B,MACnBnE,QAAQC,IAAIqC,MAEb8B,OAAM,SAACC,GACNrE,QAAQC,IAAIoE,QAEf,CAACZ,EAAkBrD,IA2BtB,OAxBOoD,EAKH,kBAAC,kBAAD,CACEc,KAAMd,EACNe,QAAS,CACPC,kBAAkB,EAClBC,MAAO,CACLC,OAAQ,CACNC,QAAS,CACPC,KAAMjF,GAERkF,KAAM,CACJF,QAAS9E,QAdZ,mCCREiF,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,KAAK,IAAIC,GAAG,gBAAgBC,OAAK,IAC3C,kBAAC,IAAD,CAAOC,KAAK,gBAAgBD,OAAK,EAACE,UAAWpD,IAC7C,kBAAC,IAAD,CAAOmD,KAAK,UAAUD,OAAK,EAACE,UAAW5B,OCD3B6B,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACLjG,QAAQiG,MAAMA,EAAMC,c","file":"static/js/main.25a4e3cb.chunk.js","sourcesContent":["import { Button, Form, Input, Modal, Popover, Row } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\n\r\ninterface IOpenAPIEditorModal {\r\n  onFinish: (formPayload: any) => void;\r\n}\r\n\r\nexport const openAPIEditorModal = (onFinish: (formPayload: any) => void) => {\r\n  Modal.info({\r\n    title: \"Add your Swagger API\",\r\n    centered: true,\r\n    maskClosable: true,\r\n    content: <APIEditorModal onFinish={onFinish} />,\r\n    okText: \"Close\",\r\n  });\r\n};\r\n\r\nexport const APIEditorModal: React.FC<IOpenAPIEditorModal> = ({\r\n  onFinish,\r\n}: IOpenAPIEditorModal) => {\r\n  const [swaggerUrl] = useState(\"https://petstore.swagger.io/v2/swagger.json\"); //  \"http://172.25.40.20:32701/api/v1/v2/api-docs\",\r\n  const [primaryColor, setPrimaryColor] = useState(\"#e30613\");\r\n  const [textColor, setTextColor] = useState(\"#333333\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"Primary: \", primaryColor);\r\n    console.log(\"Text: \", textColor);\r\n  }, [primaryColor, textColor]);\r\n\r\n  return (\r\n    <Form\r\n      onFinish={(values) => onFinish(values)}\r\n      initialValues={{ swaggerURL: swaggerUrl }}\r\n    >\r\n      <Form.Item name=\"swaggerURL\" label=\"Please insert the Swagger URL\">\r\n        <Input\r\n          size=\"middle\"\r\n          maxLength={50}\r\n          placeholder=\"http://.../api/v1/v2/api-docs\"\r\n        />\r\n      </Form.Item>\r\n      <Form.Item name=\"primaryColor\" label=\"Primary Color\">\r\n        <Popover\r\n          content={\r\n            <SketchPicker\r\n              color={primaryColor}\r\n              onChangeComplete={(color) => setPrimaryColor(color.hex)}\r\n              presetColors={[\r\n                \"#E30613\",\r\n                \"#575665\",\r\n                \"#373737\",\r\n                \"#00CCCC\",\r\n                \"#003399\",\r\n              ]}\r\n            />\r\n          }\r\n          placement=\"right\"\r\n          trigger=\"click\"\r\n        >\r\n          <Input\r\n            size=\"middle\"\r\n            maxLength={7}\r\n            placeholder={primaryColor}\r\n            value={primaryColor}\r\n            style={{\r\n              borderColor: primaryColor,\r\n              color: primaryColor,\r\n            }}\r\n          />\r\n        </Popover>\r\n      </Form.Item>\r\n      <Form.Item name=\"textColor\" label=\"Text Color\">\r\n        <Popover\r\n          content={\r\n            <SketchPicker\r\n              color={textColor}\r\n              onChangeComplete={(color) => setTextColor(color.hex)}\r\n            />\r\n          }\r\n          placement=\"right\"\r\n          trigger=\"click\"\r\n        >\r\n          <Input\r\n            size=\"middle\"\r\n            maxLength={7}\r\n            placeholder={textColor}\r\n            value={textColor}\r\n            style={{\r\n              borderColor: textColor,\r\n              color: textColor,\r\n            }}\r\n          />\r\n        </Popover>\r\n      </Form.Item>\r\n      <Button\r\n        onClick={() =>\r\n          onFinish({\r\n            swaggerURL: swaggerUrl,\r\n            primaryColor: primaryColor,\r\n            textColor: textColor,\r\n          })\r\n        }\r\n      >\r\n        Add\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { List } from \"antd\";\r\nimport React from \"react\";\r\n\r\ninterface IOpenAPIList {\r\n  dataSource: any[];\r\n}\r\n\r\nexport const OpenAPIList: React.FC<IOpenAPIList> = ({\r\n  dataSource,\r\n}: IOpenAPIList) => {\r\n  return (\r\n    <List\r\n      itemLayout=\"horizontal\"\r\n      dataSource={dataSource}\r\n      renderItem={(item: {\r\n        swaggerURL: string;\r\n        primaryColor: string;\r\n        textColor: string;\r\n      }) => (\r\n        <List.Item actions={[<a href=\"#\"> Edit </a>, <a href=\"#\"> X </a>]}>\r\n          <a\r\n            href={`apidoc?swaggerURL=${item.swaggerURL}&primaryColor=${item.primaryColor}&textColor=${item.textColor}`}\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            {item.swaggerURL}\r\n          </a>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { Button, Col, List, Row } from \"antd\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { openAPIEditorModal } from \"./OpenAPIEditorModal/OpenAPIEditor\";\r\nimport { OpenAPIList } from \"./OpenAPIList/OpenAPIList\";\r\n\r\nexport const Layout = () => {\r\n  const [openAPIList, setOpenAPIList] = useState<any[]>([]);\r\n\r\n  const finishAddingAnAPI = (formPayload: any) => {\r\n    console.log(formPayload);\r\n\r\n    const openAPIListCopy = [...openAPIList, formPayload].map((x) => ({\r\n      ...x,\r\n      primaryColor: x.primaryColor.replace(\"#\", \"\"),\r\n      textColor: x.textColor.replace(\"#\", \"\"),\r\n    }));\r\n\r\n    setOpenAPIList(openAPIListCopy);\r\n  };\r\n\r\n  return (\r\n    <Row justify=\"center\" align=\"middle\" style={{ height: \"100vh\" }}>\r\n      <Col\r\n        span={12}\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        List of OpenAPI Specifications\r\n        <OpenAPIList dataSource={openAPIList} />\r\n      </Col>\r\n      <Col span={12}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => openAPIEditorModal(finishAddingAnAPI)}\r\n        >\r\n          Add OpenAPI Specification\r\n        </Button>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport queryString from \"query-string\";\r\nimport { RedocStandalone } from \"redoc\";\r\nimport axios from \"axios\";\r\n\r\nexport const ApiDoc = () => {\r\n  const [specification, setSpecification] = useState();\r\n\r\n  const parsedUrl = queryString.parse(window.location.search);\r\n  const swaggerURL = parsedUrl.swaggerURL as string;\r\n  const primaryColor = `#${parsedUrl.primaryColor as string}`;\r\n  const textColor = `#${parsedUrl.textColor as string}`;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(swaggerURL)\r\n      .then((x) => {\r\n        setSpecification(x.data);\r\n        console.log(x);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [setSpecification, swaggerURL]);\r\n\r\n  const returnRedocIfSpecificationIsLoaded = () => {\r\n    if (!specification) {\r\n      return <div> </div>;\r\n    }\r\n\r\n    return (\r\n      <RedocStandalone\r\n        spec={specification}\r\n        options={{\r\n          nativeScrollbars: true,\r\n          theme: {\r\n            colors: {\r\n              primary: {\r\n                main: primaryColor,\r\n              },\r\n              text: {\r\n                primary: textColor,\r\n              },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  return returnRedocIfSpecificationIsLoaded();\r\n};\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Layout } from \"./components/Layout/Layout\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport { ApiDoc } from \"./components/ApiDoc/ApiDoc\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Redirect from=\"/\" to=\"/AntdAndRedoc\" exact />\n        <Route path=\"/AntdAndRedoc\" exact component={Layout} />\n        <Route path=\"/apidoc\" exact component={ApiDoc} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}